#ifndef {{header_guard}}
#define {{header_guard}}

/*	This is generated by FGL: https://github.com/Deruago/FGL
 *	For questions visit the link above!
 * 
 *	Please do not edit this file, instead modify the definition that generated this!
 *
 *	You can use the class by the following: 
 *  auto flavoring = ::fgl::flavoring::visitor::{{flavoring_name}}();
 *	flavoring.Dispatch(tree);
 *
 *	If some setup is required, please use your inserted functions and members (if any),
 *	before using the flavoring class.
 *
 *	Note: This file requires C++17 or any later release.
 */

// User defined includes
{{user_include_section.Variable_Field}}

// Required STL includes.
#include <vector>
#include <stack>
#include <string>

namespace fgl { namespace flavoring { namespace visitor {

	/*!	\struct {{flavor_value}}
	 *
	 *	\brief {{flavor_value}} is used in flavors, when the flavor's value is accessed or modified.
	 *
	 *	\note If the flavor does not have references to its value, it will not be available in that flavor.
	 */
	struct {{flavor_value}}
	{
		::std::vector<::std::vector<::std::string>> value;

		{{flavor_value}}()
		{
			value.emplace_back();
		}

		~{{flavor_value}}() = default;

		::std::vector<::std::string> GetValue() const
		{
			return *(value.end() - 1);
		}

		::std::vector<::std::string> operator()() const
		{
			return {{flavor_value}}::GetValue();
		}

		void Reduce()
		{
			(value.end() - 1)->pop_back();
		}

		void Expand(const ::std::string& expandedValue)
		{
			(value.end() - 1)->push_back(expandedValue);
		}

		void Expand(const ::std::vector<::std::string>& expandedValues)
		{
			for (const auto& expandedValue : expandedValues)
			{
				(value.end() - 1)->push_back(expandedValue);
			}
		}

		{{flavor_value}}& operator=(const ::std::string& newValue)
		{
			value.push_back({newValue});

			return *this;
		}

		{{flavor_value}}& operator=(const ::std::vector<::std::string>& newValues)
		{
			value.push_back(newValues);

			return *this;
		}

		void RemoveValue()
		{
			value.pop_back();
		}
	};

	// Global flavor type forward declarations
	{{flavor_forward_declaration.Variable_Field}}
	
	// Compile time known flavor specialization type forward declarations
	{{flavor_specialization_forward_declaration.Variable_Field}}

	// Base flavor enumerations
	{{flavor_type_definition}}

	// Specialization flavor enumerations
	{{flavor_specialization_type_definition.Variable_Field}}

	// Flavor specialization enum to type conversion
	{{flavor_enum_to_type_conversion.Variable_Field}}

	/*!	\struct FlavorStackMemory
	 *
	 *	\brief This is used to keep track of when a flavor is added/deleted.
	 *
	 *	\details It contains an invalidation counter and flavortype variable.
	 *	These 2 are used to keep track of what flavor was added, and if it was deleted.
	 *	Deleted flavors are invalidated in the stack.
	 *
	 *	\note If stack access is not used, this will not be used.
	 *
	 *	\note If runtime flavor specialization is supported, every check becomes more expensive.
	 */
	struct FlavorStackMemory
	{
	public:
		FlavorType flavorType;

	public:
		{{optional_invalidation_counter}}

	public:
		FlavorStackMemory(FlavorType flavorType_) : flavorType(flavorType_)
		{
		}

		~FlavorStackMemory() = default;

	public:
		{{optional_invalidation_add}}
		{{optional_invalidation_remove}}

		{{optional_is_invalidated_check}}
	};

	{{flavor_specialization.Variable_Field}}

	{{flavor.Variable_Field}}

	/*!	\class {{flavoring_name}}
	 *
	 *	\brief Applies flavoring to {{flavoring_name}}.
	 *
	 *	\details This flavoring is generated and optimized using a flavoring definition and FGL.
	 *	
	 *	\note It is not recommended to edit this file to apply changes.
	 *	To apply changes please change the flavoring definition of this file.
	 *
	 */
	class {{flavoring_name}} {{optional_inherit}}
	{
	private:
		{{flavor_declaration.Variable_Field}}

	private:
		{{optional_flavor_action_stack}}

	public:
		{{flavoring_name}}() = default;
		~{{flavoring_name}}() = default;

	private:
		// Entry of nodes
		{{entry_node.Variable_Field}}

		// Exit of nodes
		{{exit_node.Variable_Field}}
	
	// User defined members
	public:
		{{user_member_section.Variable_Field}}
		
	// User defined functions
	public:
		{{user_function_section.Variable_Field}}

	};

}}}

#endif // {{header_guard}}
